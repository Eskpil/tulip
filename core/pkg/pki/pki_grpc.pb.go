// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/pki/pki.proto

package pki

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PkiClient is the client API for Pki service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PkiClient interface {
	RequestSignedCertificate(ctx context.Context, in *RequestSignedCertificateRequest, opts ...grpc.CallOption) (*RequestSignedCertificateResponse, error)
}

type pkiClient struct {
	cc grpc.ClientConnInterface
}

func NewPkiClient(cc grpc.ClientConnInterface) PkiClient {
	return &pkiClient{cc}
}

func (c *pkiClient) RequestSignedCertificate(ctx context.Context, in *RequestSignedCertificateRequest, opts ...grpc.CallOption) (*RequestSignedCertificateResponse, error) {
	out := new(RequestSignedCertificateResponse)
	err := c.cc.Invoke(ctx, "/pki/RequestSignedCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PkiServer is the server API for Pki service.
// All implementations must embed UnimplementedPkiServer
// for forward compatibility
type PkiServer interface {
	RequestSignedCertificate(context.Context, *RequestSignedCertificateRequest) (*RequestSignedCertificateResponse, error)
	mustEmbedUnimplementedPkiServer()
}

// UnimplementedPkiServer must be embedded to have forward compatible implementations.
type UnimplementedPkiServer struct {
}

func (UnimplementedPkiServer) RequestSignedCertificate(context.Context, *RequestSignedCertificateRequest) (*RequestSignedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSignedCertificate not implemented")
}
func (UnimplementedPkiServer) mustEmbedUnimplementedPkiServer() {}

// UnsafePkiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PkiServer will
// result in compilation errors.
type UnsafePkiServer interface {
	mustEmbedUnimplementedPkiServer()
}

func RegisterPkiServer(s grpc.ServiceRegistrar, srv PkiServer) {
	s.RegisterService(&Pki_ServiceDesc, srv)
}

func _Pki_RequestSignedCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkiServer).RequestSignedCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pki/RequestSignedCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkiServer).RequestSignedCertificate(ctx, req.(*RequestSignedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pki_ServiceDesc is the grpc.ServiceDesc for Pki service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pki_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pki",
	HandlerType: (*PkiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestSignedCertificate",
			Handler:    _Pki_RequestSignedCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pki/pki.proto",
}
